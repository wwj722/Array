Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.
The brackets must close in the correct order, "()" and "()[]{}" are all valid but "(]" and "([)]" are not.




solution1:

public class Solution {
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();
        for(int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if(c == '(' || c == '{' || c == '[') {
                stack.push(c);
            } else if( c == ')' || c == '}' || c == ']') {
                if(stack.isEmpty()) {
                    return false;
                }
                if( c == ')' && stack.pop() == '(') {
                    continue;
                } else if( c == '}' && stack.pop() == '{') {
                    continue;
                } else if ( c == ']' && stack.pop() == '[') {
                    continue;
                }
                return false;
            }
        }
        return stack.isEmpty();
    }
}





soltuion2:

public class Solution {
    public boolean isValid(String s) {
        Map<Character, Character> map = new HashMap<>();
        Stack<Character> stack = new Stack<>();
        map.put('(', ')');
        map.put('{', '}');
        map.put('[', ']');
        for(int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if(map.keySet().contains(c)) {
                stack.push(c);
            } else if(map.values().contains(c)) {
                if(!stack.isEmpty() && map.get(stack.peek()) == c) {
                    stack.pop();
                } else {
                    return false;
                }
            }
        }
        return stack.isEmpty();
    }
}
