Given a string s, partition s such that every substring of the partition is a palindrome.

Return the minimum cuts needed for a palindrome partitioning of s.

For example, given s = "aab",
Return 1 since the palindrome partitioning ["aa","b"] could be produced using 1 cut.


solution1: time limit exceeded
public class Solution {
    boolean[][] pal;
    public int minCut(String s) {
        int len = s.length();
        pal = new boolean[len + 1][len + 1];
        int[] func = new int[len + 1];
        func[0] = -1;
        
        for(int i = 1; i <= len; i++) {
            func[i] = i - 1;
            for(int j = 0; j < i; j++) {
                if(pal[j][i] || isPalindrome(s, j, i)) {
                func[i] = Math.min(func[i], func[j] + 1);
                }
            }
        }
        return func[len];
        
    }
    public boolean isPalindrome(String s, int start, int end) {
        end--;
        while(start < end) {
            if(s.charAt(start) != s.charAt(end)) {
                return false;
            }
            start++;
            end--;
        }
        pal[start][end] = true;
        return true;
    }
}



solution2:
public class Solution {
    public int minCut(String s) {
        int len = s.length();
        int[] dp = new int[len + 1];
        boolean[][] p = new boolean[len+1][len+1];
        for (int i = 1; i <= len; i++) {
            dp[i] = i;
            for (int j = 1; j <= i; j++) {
                if (s.charAt(i-1) == s.charAt(j-1)) {
                    if (i - j < 2 || p[j+1][i-1]) {
                        p[j][i] = true;
                        if (j==1) dp[i] = 0;
                        else {
                            dp[i] = Math.min(dp[i], dp[j-1]+1);
                        }
                    }
                }
            }
        }
        return dp[len];
    }
}
