Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
For example,

Consider the following matrix:

[
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
Given target = 3, return true.


solution:
考虑到start <= mid < high, 所以写成end = mid - 1; start = mid;容易变成死循环。而end = mid; start = mid + 1;则不会。
初始将end = nums.length可以遍历所有数组成员，而不用考虑corner case：比如，nums[1].
public class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int rowNum = matrix.length;
		int colNum = matrix[0].length;

		int start = 0, end = rowNum * colNum;
		
		while (start < end) {
			int mid = start + (end - start) / 2;
			if (matrix[mid / colNum][mid % colNum] == target) {
				return true;
			} else if (matrix[mid / colNum][mid % colNum] > target) {
				end = mid;
			} else {
				start = mid + 1;
			}
		}
		return false;
    }
}
