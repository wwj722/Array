You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your 
product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad 
version are also bad.

Suppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, which causes all the following ones to 
be bad.

You are given an API bool isBadVersion(version) which will return whether version is bad. Implement a function to find the first 
bad version. You should minimize the number of calls to the API.

solution:
/* The isBadVersion API is defined in the parent class VersionControl.
      boolean isBadVersion(int version); */
public class Solution extends VersionControl {
    public int firstBadVersion(int n) {
        int low = 0, high = n;
        //no need high = n + 1, because there's always at least one bad version.
        //and if high = n + 1, when n = 2147483648, n + 1 will be -2147483648.
        while(low < high) {
            int mid = low + (high - low) / 2;
            //low <= mid < high
            if(isBadVersion(mid)) {
                high = mid;
            } else {
                low = mid + 1;
            }
        }
        return low;
    }
}

