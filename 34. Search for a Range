Given a sorted array of integers, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

For example,
Given [5, 7, 7, 8, 8, 10] and target value 8,
return [3, 4].


solution:
public class Solution {
    public int[] searchRange(int[] nums, int target) {
        int start = findFirstGreatEqu(nums, target);
		if (start == nums.length || nums[start] != target) {
			return new int[] { -1, -1 };
		}
		return new int[] { start, findFirstGreatEqu(nums, target + 1) - 1 };

	}

	/*
	 * find the first element that is greater or equal to target. return
	 * A.length if nums[A.length - 1] is greater than target. or target no
	 * found.
	 */

	public int findFirstGreatEqu(int[] A, int target) {
		int low = 0, high = A.length;// low <= mid < high
		while (low < high) {
			int mid = low + (high - low) / 2;
			if (A[mid] < target) {
				low = mid + 1;
			} else {
				// shoule be mid - 1 when A[mid] == target
				high = mid;
			}
		}
		return low;
        
        
    }
}
