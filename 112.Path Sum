Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values 
along the path equals the given sum.

For example:
Given the below binary tree and sum = 22,
              5
             / \
            4   8
           /   / \
          11  13  4
         /  \      \
        7    2      1
return true, as there exist a root-to-leaf path 5->4->11->2 which sum is 22.


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean hasPathSum(TreeNode root, int sum) {
        if(root == null) {
            return false;
        }
        Stack<TreeNode> stack = new Stack<>();
        stack.push(root);
        
        while(root != null && !stack.isEmpty()) {
            TreeNode curr = stack.pop();
            if(curr.left == null && curr.right == null) {
                if(curr.val == sum) {
                    return true;
                }
            }
            
            if(curr.left != null) {
                curr.left.val = curr.val + curr.left.val;
                stack.push(curr.left);
            }
            
            if(curr.right != null) {
                curr.right.val = curr.val + curr.right.val;
                stack.push(curr.right);
            }
            
        }
        return false;
        
    }
}
