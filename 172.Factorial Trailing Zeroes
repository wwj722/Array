Given an integer n, return the number of trailing zeroes in n!.

Note: Your solution should be in logarithmic time complexity.




solution:
The idea is to consider prime factors of a factorial n. A trailing zero is always produced by prime factors 2 and 5.
If we can count the number of 5s and 2s, our task is done. Consider the following examples.n = 5: There is one 5 and 3 2s 
in prime factors of 5! (2 * 2 * 2 * 3 * 5). So count of trailing 0s is 1. n = 11: There are two 5s and eight 2s in prime 
factors of 11! (2 8 * 34 * 52 * 7). So count of trailing 0s is 2.

Actually, The number of 2s in prime factors is always more than or equal to the number of 5s. So if we count 5s in prime 
factors, we are done. How to count total number of 5s in prime factors of n!? A simple way is to calculate floor(n/5). 

count= floor(n/5) + floor(n/25) + floor(n/125) + ....

public class Solution {
    public int trailingZeroes(int n) {
        if(n < 0) return -1;
        int count = 0;
        for(int i = 5; n / i >= 1; ) {
            count = count + n / i;
            n = n / 5;
        }
        return count;
    }
}
