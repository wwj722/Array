Given an array of integers, find if the array contains any duplicates.
Your function should return true if any value appears at least twice in the array, 
and it should return false if every element is distinct.


solution1: time: O(N); memory:O(N)

public boolean containsDuplicate(int[] nums) {
    final Set<Integer> distinct = new HashSet<Integer>();
    for(int num : nums) {
        if(distinct.contains(num)) {
            return true;
        }
        distinct.add(num);
    }
    return false;
}


solution2: time: O(N^2); memory: O(1)

public boolean containsDuplicate(int[] nums) {
        for(int i = 0; i < nums.length; i++) {
            for(int j = i + 1; j < nums.length; j++) {
                if(nums[i] == nums[j]) {
                    return true;
                }
            }
        }
        return false;
    }



solution3: O(NlgN); memory: O(1)

Arrays.sort(int[] a) in recent JDK is implemented with Dual-pivot Quicksort algorithm
which has O(n log n) average complexity and is performed in-place (e.g. requires no extra space).

    public boolean containsDuplicate(int[] nums) {
        Arrays.sort(nums);
        for(int ind = 1; ind < nums.length; ind++) {
            if(nums[ind] == nums[ind - 1]) {
                return true;
            }
        }
        return false;
    }

